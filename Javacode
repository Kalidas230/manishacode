package com.tcs.book.controller;

import java.io.File;
import java.io.IOException;
import java.util.List;
import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.tcs.book.entity.Book;
import com.tcs.book.service.BookService;

import graphql.ExecutionResult;
import graphql.GraphQL;
import graphql.schema.DataFetcher;
import graphql.schema.GraphQLSchema;
import graphql.schema.idl.RuntimeWiring;
import graphql.schema.idl.SchemaGenerator;
import graphql.schema.idl.SchemaParser;
import graphql.schema.idl.TypeDefinitionRegistry;

@RestController
@RequestMapping("/bookgraphql")
public class BookGraphQLController {
	@Autowired
	BookService service;
	// Using GraphQL configuration

	@Value("classpath:book.graphqls")
	private Resource schemaResource;

	private GraphQL graphQL;

	@PostConstruct // to load graphqls schema file from resources
	public void loadSchema() throws IOException {
		File file = schemaResource.getFile();
		TypeDefinitionRegistry registry = new SchemaParser().parse(file);
		RuntimeWiring wiring = buildWiring();
		GraphQLSchema schema = new SchemaGenerator().makeExecutableSchema(registry, wiring);
		graphQL = GraphQL.newGraphQL(schema).build();

	}

	private RuntimeWiring buildWiring() {
		DataFetcher<List<Book>> fetcher1 = data -> {
			return service.getAllBooks();
		};
		DataFetcher<Book> fetcher2 = data -> {
			Book book = service.getBookById(data.getArgument("bookId"));
			return book;
		};

		return RuntimeWiring.newRuntimeWiring().type("Query",
				typeWriting -> typeWriting.dataFetcher("getAllBooks", fetcher1)
				.dataFetcher("findBook", fetcher2))
				.build();
	}

	// End of GraphQL configuration
	// Graph QL api setup
	@PostMapping("/getall")
	public ResponseEntity<Object> getAllBooksUsingGraphQL(@RequestBody String query) {
		ExecutionResult result = graphQL.execute(query);
		return new ResponseEntity<Object>(result, HttpStatus.OK);
	}

	@PostMapping("/getbyid")
	public ResponseEntity<Object> getBookByIdUsingGraphQL(@RequestBody String query) {
		ExecutionResult result = graphQL.execute(query);
		return new ResponseEntity<Object>(result, HttpStatus.OK);
	}






import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class ArithmeticTestCase {
	
	Arithmetic arth= new Arithmetic();;
		
	@BeforeEach
	public void start() {
		System.out.println("* start() *");
	}
	@AfterEach
	public void stop() {
		System.out.println("* stop() *");
	}
	@Test
	public void testAdd() {
		assertEquals(10, arth.add(6, 4));  
	}
	@Test
	public void testMultiply() {
		assertEquals(50, arth.multiply(10, 5)); 
	}
}








import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class ArithmeticTestCase {
	
	Arithmetic arth= new Arithmetic();;
		
	@BeforeEach
	public void start() {
		System.out.println("* start() *");
	}
	@AfterEach
	public void stop() {
		System.out.println("* stop() *");
	}
	@Test
	public void testAdd() {
		assertEquals(10, arth.add(6, 4));  
	}
	@Test
	public void testMultiply() {
		assertEquals(50, arth.multiply(10, 5)); 
	
	}
		
		
		
	}


package com.tcs.book;

import org.jetbrains.annotations.TestOnly;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SampleTest {
	Sample sample = new Sample();
	
	@Test
	public void testSample() {
		Assertions.assertEquals(10, 5,5);
		
	}



**********


package com.tcs.book.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.tcs.book.entity.Book;
import com.tcs.book.exceptions.BookNotFoundException;
import com.tcs.book.repo.BookRepository;

@Service
public class BookServiceImpl implements BookService{
	@Autowired
	BookRepository repo;

	@Override
	public int addBook(Book book) {
		repo.save(book);
		return book.getBookId();
	}
	@Override
	public int updateBook(Book book) {
		repo.save(book);
		return book.getBookId();
	}
	@Override
	public void removeBook(int bookId) {
		repo.deleteById(bookId); 
	}
	@Override
	public List<Book> getAllBooks() {
		return repo.findAll();
	}
 
	@Override
	public Book getBookById(int bookId) {
		Optional<Book> optionalBook = repo.findById(bookId); 
		if(optionalBook.isEmpty())
			throw new BookNotFoundException();
		Book book = optionalBook.get();
		return book;
	}
	@Override
	public List<Book> searchBook(String searchKey) {
		
		return repo.searchForBooks(searchKey);
	}
	@Override
	public List<Book> findByTitle(String title) {
		String str = "%"+title+"%";
		return repo.findByTitleLike(str);
	}

}

package com.tcs.book.service;

************************
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.tcs.book.entity.Book;
import com.tcs.book.exceptions.BookNotFoundException;
import com.tcs.book.repo.BookRepository;

@Service
public class BookServiceImpl implements BookService{
	@Autowired
	BookRepository repo;

	@Override
	public int addBook(Book book) {
		repo.save(book);
		return book.getBookId();
	}
	@Override
	public int updateBook(Book book) {
		repo.save(book);
		return book.getBookId();
	}
	@Override
	public void removeBook(int bookId) {
		repo.deleteById(bookId); 
	}
	@Override
	public List<Book> getAllBooks() {
		return repo.findAll();
	}
 
	@Override
	public Book getBookById(int bookId) {
		Optional<Book> optionalBook = repo.findById(bookId); 
		if(optionalBook.isEmpty())
			throw new BookNotFoundException();
		Book book = optionalBook.get();
		return book;
	}
	@Override
	public List<Book> searchBook(String searchKey) {
		
		return repo.searchForBooks(searchKey);
	}
	@Override
	public List<Book> findByTitle(String title) {
		String str = "%"+title+"%";
		return repo.findByTitleLike(str);
	}

}





+******
 <parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.6.11</version>
	</parent>
	<properties>
		<java.version>1.8</java.version>
		<spring-cloud.version>2021.0.4</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- swagger dependencies -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
			<version>1.6.6</version>
		</dependency>
	
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

=======================
server.port : 8182

server.servlet.contextPath : /creditscoreapp
spring.application.name : creditscore-service

#H2 database configuration
spring.h2.console.enabled=true
spring.datasource.platform=h2
spring.datasource.url=jdbc:h2:mem:mlk
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto = update
spring.jpa.show-sql=true

============================
package com.tcs.credit.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class CreditScore {
	@Id
	@Column
	private String pancard;
	@Column
	private String customerName;
	@Column
	private int creditscore;
	public String getPancard() {
		return pancard;
	}
	public void setPancard(String pancard) {
		this.pancard = pancard;
	}
	public String getCustomerName() {
		return customerName;
	}
	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}
	public int getCreditscore() {
		return creditscore;
	}
	public void setCreditscore(int creditscore) {
		this.creditscore = creditscore;
	}
	
}

========================
package com.tcs.credit.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.tcs.credit.entity.CreditScore;

@Repository
public interface CreditScoreRepo extends JpaRepository<CreditScore,String>{

}

========================
package com.tcs.credit.service;

import java.util.List;
import java.util.Optional;

import com.tcs.credit.entity.CreditScore;

public interface CreditScoreService {
	List<CreditScore> findAll();
	Optional<CreditScore> findById(String pancard);
	void save(CreditScore score);
}

=======================
package com.tcs.credit.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.tcs.credit.entity.CreditScore;
import com.tcs.credit.repo.CreditScoreRepo;

@Service
public class CreditScoreServiceImpl implements CreditScoreService{
	@Autowired
	CreditScoreRepo repo;
	
	@Override
	public List<CreditScore> findAll() {
		return repo.findAll();
	}

	@Override
	public Optional<CreditScore> findById(String pancard) {
		return repo.findById(pancard);
	}

	@Override
	public void save(CreditScore score) {
		repo.save(score);		
	}
}

=========================

http://localhost:8080/creditscoreapp/swagger-ui/index.html



<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.6.11</version>
	</parent>
	<properties>
		<java.version>1.8</java.version>
		<spring-cloud.version>2021.0.4</spring-cloud.version>
	</properties>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
		
	</build>




http://localhost:8080/creditscoreapp/swagger-ui/index.html


spring.application.name = Eureka-Naming-Server

eureka.client.registerWithEureka = false
eureka.client.fetchRegistry = false
server.port = 8761



in properties;;
after java version
<maven-plugin.version>3.2.1</maven-plugin.version>

*****

<!-- Eureka client dependency -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>



		</dependency>


==============

#Eureka client configuration
eureka.client.serviceUrl.defaultZone : http://localhost:8761/eureka


}





========================




{
  "name": "tcs-book-react",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@reduxjs/toolkit": "^1.9.0",
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.2.0",
    "dateformat": "^5.0.3",
    "moment": "^2.29.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-redux": "^8.0.5",
    "react-router": "^6.4.3",
    "react-router-dom": "^6.4.3",
    "react-scripts": "5.0.1",
    "redux": "^4.2.0",
    "redux-persist": "^6.0.0",
    "redux-thunk": "^2.4.2",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
==========================


return(
        <div className="align-items-center container">
            <h1>Add New Book Details</h1>
            <form>
                <div className="form-group justify-content-center">
                    <label>Enter Book ID</label>
                    <input type={"text"} name="bookId" className="form-control" 
                       value={book.bookId} onChange={onInputChange} /> <br/> 
                    <label>Enter Book Title</label>
                    <input type={"text"} name="title" className="form-control" 
                        value={book.title} onChange={onInputChange} />  <br/>    
                    <label>Enter Author</label>
                    <input type={"text"} name="author" className="form-control" 
                        value={book.author} onChange={onInputChange} />  <br/>
                    <label>Enter Publications</label>
                    <input type={"text"} name="publications" className="form-control" 
                        value={book.publications} onChange={onInputChange} />  <br/>
                     <label>Enter Year</label>
                    <input type={"text"} name="year" className="form-control" 
                        value={book.year} onChange={onInputChange} />  <br/>
                     <label>Enter Price</label>
                    <input type={"text"} name="price" className="form-control" 
                        value={book.price} onChange={onInputChange} />  <br/>
                    <button className="ui button medium green" onClick={onSubmit}>ADD</button>
                    &nbsp; &nbsp;
                    <Link to={"/"}> <button className="ui primary button medium">Cancel</button> </Link>
                </div>
            </form>
        </div>
    );


++==========
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css" />
 <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
 <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
 <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css" />
==========
App.js
import React from "react";
import { Provider } from "react";
import {BrowserRouter,Route,Routes} from "react-router-dom";
import AddBook from "./function/AddBook";
import { store,Persistor } from "./redux/Store";
import{PersistGate}from "./redux-persist/integration/react";

function App() {
  return (
   <Provider store={store}>
      <PersistGate persistor={persistor}>
        <BrowserRouter>
          <Routes>
            <Route path="/addbook" element= {<AddBook />}/>
          </Routes>
        </BrowserRouter>
      </PersistGate>
   </Provider>
  );
}

export default App;

=================================
Addbook.js


import React,{useState} from "react";
import { Link,Navigate } from "react-router-dom";
import BookAction from "../redux/action/BookAction";
import { useNavigate } from "react-router-dom";
import { useSelector } from "react-redux/es/exports";

const AddBook = () =>
{
    const bookAction = BookAction();
    const[book,setBook] = useState({});
    const navigate = useNavigate();
    
    const onInputChange = (obj) => {
        setBook({...book,[obj.target.navigate] : obj.target.value});

    }
    const onSubmit = (bk) => {
        bookAction.addBook(book,navigate);
    }
    return(
        <div className="align-items-center container">
            <h1>Add New Book Details</h1>
            <form>
                <div className="form-group justify-content-center">
                    <label>Enter Book ID</label>
                    <input type={"text"} name="bookId" className="form-control" value={book.bookId} onChange={onInputChange} /> <br/> 
                    <label>Enter Book Title</label>
                    <input type={"text"} name="title" className="form-control" value={book.title} onChange={onInputChange} />  <br/>    
                    <label>Enter Author</label>
                    <input type={"text"} name="author" className="form-control" value={book.author} onChange={onInputChange} />  <br/>
                    <label>Enter Publications</label>
                    <input type={"text"} name="publications" className="form-control" value={book.publications} onChange={onInputChange} />  <br/>
                     <label>Enter Year</label>
                    <input type={"text"} name="year" className="form-control" value={book.year} onChange={onInputChange} />  <br/>
                     <label>Enter Price</label>
                    <input type={"text"} name="price" className="form-control" value={book.price} onChange={onInputChange} />  <br/>
                    <button className="ui button medium green" onClick={onSubmit}>ADD</button>
                    &nbsp; &nbsp;
                    <Link to={"/"}> <button className="ui primary button medium">Cancel</button> </Link>
                </div>
            </form>
        </div>
    );
}
export default AddBook;
========================================

BookAction.js

import { useDispatch } from "react-redux";
import { REQUEST_TYPE, server_request } from "../../axios";
import { ADD_BOOK } from "../reducer/BookReducer";
import { Navigate } from "react-router";


function BookAction()
{
    const dispatch = useDispatch();
    
    const addBook = (book, navigate) =>
    {
        try{
        const response = server_request(REQUEST_TYPE.POST,"/book",book);
        console.log(response.status);
        //navigate("/");
        return dispatch({type : ADD_BOOK ,payload : book});
       }
       catch(error)
       {
        console.log(error);
       }
    };
return Object.freeze({addBook});  
}
export default BookAction;

====================================================================
Bookreducer

export const ADD_BOOK="ADD_BOOK";

const BookReducer = (state = [], action) => {
    let books =  [...state];
    switch(action.type){
        case ADD_BOOK : {
            books.push(action.payload);
            return books;
        }
        default :
           return state;
    }
}

export default BookReducer;
=============================================================
Rootreducer


import { combineReducers } from "redux";
import BookReducer from "./BookReducer";

const RootReducer = combineReducers({

    books : BookReducer

});

export default RootReducer;
==================================================
Store 



import { configureStore } from "@reduxjs/toolkit";
import RootReducer from "./reducer/RootReducer";
import { persistReducer,persistStore } from "redux-persist";
import storage from "redux-persist/lib/storage";
import thunk from "redux-thunk";

const persistConfig = {
    key : "root",
    storage,
    whiteList : ['books']
};

const persistedReducer =  persistReducer(persistConfig, RootReducer);

export const store = configureStore({
    reducer : persistedReducer,
    middleware : [thunk]
});

export const persistor = persistStore(store);


==================================================================

app.js



import React from "react";
import { Provider } from "react-redux";
import { BrowserRouter, Route, Routes } from "react-router-dom";
import AddBook from "./functions/AddBook";
import { store, persistor } from "./redux/store";
import { PersistGate } from "redux-persist/integration/react";

function App() {
  return (
   <Provider store={store}>
      <PersistGate persistor={persistor}>
        <BrowserRouter>
          <Routes>
            <Route path="/addbook" element= {<AddBook />}/>
          </Routes>
        </BrowserRouter>
      </PersistGate>
   </Provider>
  );
}
export default App;


==============================

axios.js



import axios from "axios";

const APIURL = "http://localhost:8182/library";

export const REQUEST_TYPE ={
    GET : "GET",
    POST : "POST",
    PUT  : "PUT",
    DELETE : "DELETE"
}

export const server_request = (method,url,data) =>{
    return axios ({method,url : APIURL+url, data});
}

=============================================================

<div className="form-group justify-content-center">
                    <label>Enter Book ID</label>
                    <input type={"text"} name="bookId" className="form-control" value={book.bookId} onChange={onInputChange} /> <br/> 
                    <label>Enter Book Title</label>
                    <input type={"text"} name="title" className="form-control" value={book.title} onChange={onInputChange} />  <br/>    
                    <label>Enter Author</label>
                    <input type={"text"} name="author" className="form-control" value={book.author} onChange={onInputChange} />  <br/>
                    <label>Enter Publications</label>
                    <input type={"text"} name="publications" className="form-control" value={book.publications} onChange={onInputChange} />  <br/>
                     <label>Enter Year</label>
                    <input type={"text"} name="year" className="form-control" value={book.year} onChange={onInputChange} />  <br/>
                     <label>Enter Price</label>
                    <input type={"text"} name="price" className="form-control" value={book.price} onChange={onInputChange} />  <br/>
                    <button className="ui button medium green" onClick={onSubmit}>ADD</button>
                    &nbsp; &nbsp;
                    <Link to={"/"}> <button className="ui primary button medium">Cancel</button> </Link>
                </div>
            </form>
        </div>
    );
} 
export default EditBook;   
